{% extends '@layout/default.html.twig' %}

{% block title %} Task {% endblock %}


{% block content %}

    <div id="Task_Deskription" class="jumbotron">
        <h1>Описание <span class="zf-green">Теста</span></h1>
        <p>
            Реализовать АПИ для приложения “Каталог рецептов”, разрешается использовать мидлвэр (PSR-7) микрофрэймворки, АПИ желательно должно соответствовать РЕСТ стандартам, за исключением некоторых методов которые можно реализовать в виде RPC. АПИ должно давать возможность создать юзера, залогиниться, создавать, редактировать и удалять от лица этого юзера рецепты, так же обязательным полем у рецепта является фотография, следовательно нужно API для загрузки фотографий. Для реализации самого API и сопутствующего ему функционала запрещается использовать библиотеки.
        </p>
        <p class='Padding'> База данных PostgreSql </p>
        <p class='Padding'> Версия PHP > 7 </p>
    </div>
        <p><a class="btn btn-success btn-lg" href="https://github.com/Janik-Tarverdyan/Catalog_Recipes.git" target="_blank">Итоговый вариант API на гитхабе.</a></p>

    <div id="Actions" >
        <button type="button" class="btn btn-success" data-toggle="modal" data-target="#exampleModalCenter"> Добавит </button>
        <button type="button" class="btn btn-danger"> Удалить </button>

        <!-- Modal -->
        <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLongTitle">Новый рецепт</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form action="/api/catalog/create">
                            <div class="form-group">
                                <label for="usr">Имя Рецепта</label>
                                <input name="Name" type="text" class="form-control" id="usr">
                            </div>

                            <div class="form-group">
                                <label for="comment">Описание Рецепта</label>
                                <textarea name="Description" class="form-control" rows="5" id="comment"></textarea>
                            </div>


                            <label for="comment">Иконка Рецепта</label>
                            <div>
                                <label class="file">
                                    <span class="file-custom"></span>
                                    <input name="icon" type="file" id="file1" >
                                </label>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn_submit btn-primary"> Создать </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>





    <div class="row">
        <div class="col-md-4">
            <h2>
                <a href="https://docs.zendframework.com/zend-expressive/getting-started/features" target="_blank">
                    <i class="fa fa-bolt"></i> Agile &amp; Lean
                </a>
            </h2>
            <p>
                Expressive is fast, small and perfect for rapid application development, prototyping and api's.
                You decide how you extend it and choose the best packages from major framework or standalone projects.
            </p>
        </div>

        <div class="col-md-4">
            <h2>
                <a href="https://github.com/zendframework/zend-diactoros" target="_blank">
                    <i class="fa fa-exchange-alt"></i> HTTP Messages
                </a>
            </h2>
            <p>
                HTTP messages are the foundation of web development. Web browsers and HTTP clients such as cURL create
                HTTP request messages that are sent to a web server, which provides an HTTP response message.
                Server-side code receives an HTTP request message, and returns an HTTP response message.
            </p>
        </div>

        <div class="col-md-4">
            <h2>
                <a href="https://github.com/zendframework/zend-stratigility" target="_blank">
                    <i class="fa fa-dot-circle"></i> Middleware
                </a>
            </h2>
            <p>
                Middleware is code that exists between the request and response, and which can take the incoming
                request, perform actions based on it, and either complete the response or pass delegation on to the
                next middleware in the queue. Your application is easily extended with custom middleware created by
                yourself or <a href="https://packagist.org/search/?q=middleware" target="_blank">others</a>.
            </p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <h2>
                <a href="https://docs.zendframework.com/zend-expressive/features/container/intro" target="_blank">
                    <i class="fa fa-cube"></i> Containers
                </a>
            </h2>
            <p>
                Expressive promotes and advocates the usage of Dependency Injection/Inversion of Control containers
                when writing your applications. Expressive supports multiple containers which typehints against
                <a href="https://github.com/php-fig/container" target="_blank">PSR Container</a>.
            </p>
            {% if containerName is defined %}
                <p>
                    <a href="{{ containerDocs }}" target="_blank">
                        Get started with {{ containerName }}.
                    </a>
                </p>
            {% endif %}
        </div>

        <div class="col-md-4">
            <h2>
                <a href="https://docs.zendframework.com/zend-expressive/features/router/intro" target="_blank">
                    <i class="fa fa-plane"></i> Routers
                </a>
            </h2>
            <p>
                One fundamental feature of zend-expressive is that it provides mechanisms for implementing dynamic
                routing, a feature required in most modern web applications. Expressive ships with multiple adapters.
            </p>
            {% if routerName is defined %}
                <p>
                    <a href="{{ routerDocs }}" target="_blank">
                        Get started with {{ routerName }}.
                    </a>
                </p>
            {% endif %}
        </div>

        <div class="col-md-4">
            <h2>
                <a href="https://docs.zendframework.com/zend-expressive/features/template/twig" target="_blank">
                    <i class="fa fa-edit"></i> Templating
                </a>
            </h2>
            <p>
                By default, no middleware in Expressive is templated. We do not even provide a default templating
                engine, as the choice of templating engine is often very specific to the project and/or organization.
                However, Expressive does provide abstraction for templating, which allows you to write middleware that
                is engine-agnostic.
            </p>
            {% if templateName is defined %}
                <p>
                    <a href="{{ templateDocs }}" target="_blank">
                        Get started with {{ templateName }}.
                    </a>
                </p>
            {% endif %}
        </div>
    </div>

    <script>
        $("input[type=file]").change(function(){
            var fieldVal = $(this).val();
            if (fieldVal != undefined || fieldVal != "") {
                $(this).next(".file-custom").attr('data-content', fieldVal);
            }
        });
    </script>


{% endblock %}